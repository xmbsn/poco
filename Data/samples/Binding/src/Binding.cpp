//
// Binding.cpp
//
// $Id: //poco/Main/Data/samples/Binding/src/Binding.cpp#2 $
//
// This sample demonstrates the Data library.
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include "Poco/MemTrack.h"
#include "Poco/Data/Session.h"
#include "Poco/Data/ODBC/Connector.h"
#include "Poco/Data/SQLite/Connector.h"
#include <vector>
#include <iostream>

using namespace Poco::Data::Keywords;
using Poco::Data::Session;
using Poco::Data::Statement;


struct MemTracker
{
	MemTracker()
	{
		//std::cout << std::endl << " ===== BEGIN =========================" << std::endl;
		//MemTrack::TrackListMemoryUsage();
	}

	~MemTracker()
	{
		//std::cout << std::endl << " ===== END END =========================" << std::endl;
		//MemTrack::TrackListMemoryUsage();
	}
};


void printMemUse(const std::string& msg = "")
{
	//std::cout << std::endl << msg << std::endl;
	MemTrack::TrackListMemoryUsage();
}


void doAllocLog(bool enable)
{
	MemTrack::MemStamp::doLog = enable;
}


int main(int argc, char** argv)
{
	{
		//ses << "CREATE TABLE test_leak (cod INTEGER, cod_value CHARACTER VARYING)", now;

		{
			int value = 0;
		printMemUse();
		Session ses("ODBC", "DSN=PocoDataPgSQLTestW;UID=postgres;PWD=postgres;");
		//Session ses("ODBC", "DRIVER=SQL Server;UID=poco;PWD=poco;DATABASE=poco;SERVER=192.168.1.27;PORT=1433;");
		//Session ses("SQLite", "C:\\temp\\leak_test.db");
		//ses << "CREATE TABLE test_leak_int (cod INTEGER)", now;
		//printMemUse();
		Statement stmt(ses);
		
		//stmt << "insert into test_leak(cod, cod_value) values(?, ?)", use(value), use(aa);
		//printMemUse();
		stmt << "insert into test_leak_int(cod) values(?)", use(value);
		//stmt << "select count(*) from test_leak_int", into(value);
		//Poco::Data::AbstractBinding* pBind = use(value);
		//pBind->release();
		
		//stmt.addBind(pBind, false);
		//stmt << "update test_leak_int set cod = 1";//, use(value);
		printMemUse();
		//doAllocLog(true);
		stmt.execute();
		//doAllocLog(false);
		//printMemUse();
		}
		//printMemUse();
		MemTrack::TrackListMemoryUsage();
	}

	return 0;
}



#if 0
struct Person
{
	std::string name;
	std::string address;
	int         age;
};


int main(int argc, char** argv)
{
	// create a session
	Session session("SQLite", "sample.db");

	// drop sample table, if it exists
	session << "DROP TABLE IF EXISTS Person", now;
	
	// (re)create table
	session << "CREATE TABLE Person (Name VARCHAR(30), Address VARCHAR, Age INTEGER(3))", now;
	
	// insert some rows
	Person person = 
	{
		"Bart Simpson",
		"Springfield",
		12
	};
	
	Statement insert(session);
	insert << "INSERT INTO Person VALUES(?, ?, ?)",
		use(person.name),
		use(person.address),
		use(person.age);
	
	insert.execute();
	
	person.name    = "Lisa Simpson";
	person.address = "Springfield";
	person.age     = 10;
	
	insert.execute();
	
	// a simple query
	Statement select(session);
	select << "SELECT Name, Address, Age FROM Person",
		into(person.name),
		into(person.address),
		into(person.age),
		range(0, 1); //  iterate over result set one row at a time
		
	while (!select.done())
	{
		select.execute();
		std::cout << person.name << " " << person.address << " " << person.age << std::endl;
	}

	// another query - store the result in a container
	std::vector<std::string> names;
	session << "SELECT Name FROM Person",
		into(names),
		now;
		
	for (std::vector<std::string>::const_iterator it = names.begin(); it != names.end(); ++it)
	{
		std::cout << *it << std::endl;
	}

	return 0;
}
#endif
